---
layout: post
title:  "AngularJS Basics"
date:   2016-02-08 21:45:50 -0500
categories: tutorials
---
This tutorial was created to show you the basics of using AngularJS. This simple web application uses a corresponding JSON file for all of its data. The JSON file can be downloaded from the GitHub repository which can be found at the bottom of this tutorial. To help better explain the tutorial, we will show code snippets and images of the application. For better understanding, clone the GitHub repository located at the bottom of this tutorial. Lets get started!
<br />
<br />
<h3>Requirements</h3>

Before getting started, there are several requirements needed. These requirements are listed below and can be obtained by using Bower. To use Bower, Node Package Manager(npm) needs to be installed onto your system. To install npm, follow <a href="https://docs.npmjs.com/cli/install" target="_blank">this</a> tutorial. 
<ul>
	<li>Bootstrap</li>
	<li>AngularJS</li>
</ul>

To install bootstrap, open up your bash terminal, navigate to your project directory and type:
{% highlight bash %}
bower install bootstrap
{% endhighlight %}
<br />
To install AngularJS, open up your bash terminal, navigate to your project directory and type:
{% highlight bash %}
bower install angular
{% endhighlight %}

<br />
After the requirements are installed into the generated bower_components, we need to create our `index.html` file and link bootstrap and angular.
{% highlight html %}
<!DOCTYPE HTML>
<html>
   <head>
        <!-- CSS Section -->
        <link href="bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" type="text/css">
        <link href="css/style.css" rel="stylesheet" type="text/css">
   </head>
   <body>
	
        <!-- JavaScrip Section -->
        <script src="bower_components/angular/angular.min.js" type="text/javascript"></script>
   </body>
</html>
{% endhighlight %}
<br />

<h3>Setting Up Angular</h3>

Next we need to create an `app.js` file that will contain most of our AngularJS code. To do this, we need to create a function that contains a module called tutorialLists.
{% highlight javascript %}
(function(){
   var app = angular.module('tutorialLists', []);
})();
{% endhighlight %}
<br />
We need to link the `app.js` file in our `index.html` file in our Javascripts section. 
{% highlight html%}
<script src="./app.js" type="text/javascript"></script>
{% endhighlight %} 
<br />
To let Angular know that we want to use the newly created `tutorialList` module, we need to add `ng-app="tutorialList"` inside our opening heml tag.
{% highlight html%}
<html ng-app="tutorialLists">
{% endhighlight %} 
<br />
To test that Angular is working, lets create a header for our web application within our body tags that takes two strings, `AngularJS` and `Tutorials`,  and combines them together and to print to the page.
{% highlight html%}
<h1 class="text-center">{% raw %}{{"AngularJS " + "Tutorials"}}{% endraw %}</h1>
{% endhighlight %} 
The results of this line are shown in the image below.
<img class="postImages" src="{{ site.baseurl }}/img/angularHeader.png">
<br />
<br />
<h3>Creating HTML Container</h3>

Next we need to create a container that will house the information for each tutorial. This container will display the image of the artist, the title of the tutorial in an `h3` tag, the artist name, and a link to the tutorial. A description of the code will follow after the code snippet. 
{% highlight html%}
<div class="col-sm-6 col-md-4 tutorialContainer">
   <center><img ng-src="{% raw %}{{tutorial.image}}{% endraw %}" class="writerImage"></center>
   <h3>{% raw %}{{tutorial.title}}{% endraw %}</h3>
   <div class="positionBottom">
      <p>By: {% raw %}{{tutorial.author}}{% endraw %}</p>
      <p><a ng-href="{% raw %}{{tutorial.url}}{% endraw %}" class="tutorialLink">Click Here for Tutorial</a></p>
   </div>
</div>
{% endhighlight %} 
First, a `div` is created to contain all of the tutorials information. The image is then placed at the center of the div which uses `ng-src="{% raw %}{{tutorial.image}}{% endraw %}"` to generate the image. An `h3` tag is then used to get the tutorial's title using `{% raw %}{{tutorial.title}}{% endraw %}`. Another `div` container is used to hold the authors name, and link to the tutorial that uses a custom css style to position the container in the bottom left corner of the main container. The authors name is generated by using `{% raw %}{{tutorial.author}}{% endraw %}`. Finally the link is generated using an anchor tag that uses `ng-href="{% raw %}{{tutorial.url}}{% endraw %}"` to get the source. After we populate the containers using Angular, they should be similar to the example below. <br />
<img class="postImages" src="{{ site.baseurl }}/img/tutorialContainer.png">
<br />
<br />
<h3>Populating Tutorial Containers Part 1: AngularJS</h3>

To populate the tutorial containers, we first need to open our `app.js` file. In the `app.js` file, we need to create a Angular controller named `TutorialController` that uses the `http` core Angular service that we will use to pull the JSON data. 
{% highlight javascript %}
app.controller('TutorialController',['$http',function($http){

}]);
{% endhighlight %}
<br />
Within our `TutorialController`, we need to create a variable named `tutorials` and set it to equal `this`.
{% highlight javascript %}
var tutorials = this;
{% endhighlight %}
<br />
Next, we are going to create a `$http.get` method that will populate a list inside of our `tutorials` variable from the specified JSON file. This function will only populate the list if the `$http.get` method is successful, otherwise it will do nothing. 
{% highlight javascript %}
$http.get('json/tutorials.json').success(function(data){
   tutorials.jsonList = data;
});
{% endhighlight %}
<br />
The final result for the `TutorialController` should be this:
{% highlight javascript %}
app.controller('TutorialController',['$http',function($http){
   var tutorials = this;
   $http.get('json/tutorials.json').success(function(data){
      tutorials.jsonList = data;
   });
}]);
{% endhighlight %}
<br />
<h3>Populating Tutorial Containers Part 2: HTML</h3>

We now need to connect our `TutorialController` to our HTML by using the `ng-controller` directive inside our opening `body` tag. We will also give the controller an alias called `tutorialCtrl`.
{% highlight html %}
<body ng-controller="TutorialController as tutorialCtrl">
{% endhighlight %}
<br />
Next, we want to create a tutorial container for each tutorial in the list. To do this we will add the `ng-repeat` directive inside our main `div` of our tutorial container that creates a new container for each of the tutorials inside the `jsonList`. 
{% highlight html %}
<div class="col-sm-6 col-md-4 tutorialContainer" ng-repeat="tutorial in tutorialCtrl.jsonList">
{% endhighlight %}
<br />
You should now be able to run the application in your bowser and the list of tutorials will be populated from the JSON file. <br />
<img class="postImages responsive-image" src="{{ site.baseurl }}/img/tutorialsList.png">
<br />

<h3>Adding Search</h3>

Finally we want to be able to search the tutorials using AngularJS. To do this, we first need to add a textbox to the webpage using the input tag. Inside that input tag, we need to add a `ng-model` directive and set the model name to `searchTutorials`. 
{% highlight html %}
<input type="text" class="form-control" ng-model="searchTutorials" placeholder="Search Tutorials">
{% endhighlight %} 
<img src="{{ site.baseurl }}/img/tutorialsSearch.png">
<br />
To sync up the `searchTutorials` model to the list of tutorials, we need to add the filter property to the `ng-repeat` directive by using a pipe.
{% highlight html %}
<div class="col-sm-6 col-md-4 tutorialContainer" ng-repeat="tutorial in tutorialCtrl.jsonList | filter:searchTutorials">
{% endhighlight %} 
<br />

<h3>Summary</h3>
This tutorial is finally complete. You now have a simple AngularJS web application that pulls data from an external JSON file and displays it to a web page. The list is also searchable using the power of AngularJS filters. To view the source code in its entirety, view the <a href="https://github.com/tylerlutz/AngularJSAssignment5Part1" target="_blank">GitHub repo</a>. For more information on AngularJS, check out the <a href="https://docs.angularjs.org/" target="_blank">AngularJS Doc</a>.

[jekyll-docs]: http://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
